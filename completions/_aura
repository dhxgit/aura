#compdef aura

# Zsh completion file for Aura, based on Yaourt's
# Merci.

# handles --help subcommand
_aura_action_help() {
    _arguments -s : \
        "$_aura_opts_commands[@]"
}

# handles cases where no subcommand has yet been given
_aura_action_none() {
    _arguments -s : \
        "$_aura_opts_commands[@]"
}

# handles --query subcommand
_aura_action_query() {
    local context state line
    typeset -A opt_args
    
    case $state in
        query_file)
            _arguments -s : \
                "$_aura_opts_common[@]" \
                "$_aura_opts_query_modifiers[@]" \
                '*:package file:_files -g "*.pkg.tar.*"'
            ;;
        query_group)
            _arguments -s : \
                "$_aura_opts_common[@]" \
                "$_aura_opts_query_modifiers[@]" \
                '*:groups:_aura_completions_installed_groups'
            ;;
        query_owner)
            _arguments -s : \
                "$_aura_opts_common[@]" \
                "$_aura_opts_query_modifiers[@]" \
                '*:file:_files'
            ;;
        query_search)
            _arguments -s : \
                "$_aura_opts_common[@]" \
                "$_aura_opts_query_modifiers[@]" \
                '*:search text: '
            ;;
        *)
            _arguments -s : \
                "$_aura_opts_common[@]" \
                "$_aura_opts_query_actions[@]" \
                "$_aura_opts_query_modifiers[@]" \
                '*:package:_aura_completions_installed_packages'
            ;;
    esac
}

# handles --remove subcommand
_aura_action_remove() {
    _arguments -s : \
        "$_aura_opts_common[@]" \
        "$_aura_opts_remove[@]"
}

# handles --sync subcommand
_aura_action_sync() {
    local context state line
    typeset -A opt_args
    
    case $state in
        sync_clean)
            _arguments -s : \
                "$_aura_opts_common[@]" \
                "$_aura_opts_sync_modifiers[@]" \
                '*-c[Remove old packages from cache]' \
                ;;
        sync_group)
            _arguments -s : \
                "$_aura_opts_common[@]" \
                "$_aura_opts_sync_modifiers[@]" \
                '*:package group:_aura_completions_all_groups'
            ;;
        sync_search)
            _arguments -s : \
                "$_aura_opts_common[@]" \
                "$_aura_opts_sync_modifiers[@]" \
                '*:search text: '
            ;;
        *)
            _arguments -s : \
                "$_aura_opts_common[@]" \
                "$_aura_opts_sync_modifiers[@]" \
                '*:package:_aura_completions_all_packages'
            ;;
    esac
}

# handles --upgrade subcommand
_aura_action_upgrade() {
    _arguments -s : \
        "$_aura_opts_common[@]" \
        "$_aura_opts_pkgfile[@]"
}

# handles --version subcommand
_aura_action_version() {
    # no further arguments
    return 0
}

# provides completions for package groups
_aura_completions_all_groups() {
    local -a cmd groups
    _aura_get_command
    groups=( $(_call_program groups $cmd[@] -Sg) )
    typeset -U groups
    compadd "$@" -a groups
}

# provides completions for packages available from repositories
# these can be specified as either 'package' or 'repository/package'
_aura_completions_all_packages() {
    local -a cmd packages repositories packages_long
    _aura_get_command

    if compset -P1 '*/*'; then
        packages=( $(_call_program packages $cmd[@] -Sql ${words[CURRENT]%/*}) )
        typeset -U packages
        if [[ -d /var/aur ]]; then
            packages=( $packages $(ls /var/aur) )
        fi
        _wanted repo_packages expl "repository/package" compadd ${(@)packages}
    else
        packages=( $(_call_program packages $cmd[@] -Sql) )
        typeset -U packages
        if [[ -d /var/aur ]]; then
            packages=( $packages $(ls /var/aur) )
        fi
        _wanted packages expl "packages" compadd - "${(@)packages}"

        repositories=(${(o)${${${(M)${(f)"$(</etc/pacman.conf)"}:#\[*}/\[/}/\]/}:#options})
        typeset -U repositories
        _wanted repo_packages expl "repository/package" compadd -S "/" $repositories
    fi
}

# provides completions for package groups
_aura_completions_installed_groups() {
    local -a cmd groups
    _aura_get_command
    groups=(${(o)${(f)"$(_call_program groups $cmd[@] -Qg)"}% *})
    typeset -U groups
    compadd "$@" -a groups
}

# provides completions for installed packages
_aura_completions_installed_packages() {
    local -a cmd packages packages_long
    packages_long=(/var/lib/pacman/local/*(/))
    packages=( ${${packages_long#/var/lib/pacman/local/}%-*-*} )
    compadd "$@" -a packages
}

# provides completions for repository names
_aura_completions_repositories() {
    local -a cmd repositories
    repositories=(${(o)${${${(M)${(f)"$(</etc/pacman.conf)"}:#\[*}/\[/}/\]/}:#options})
    # Uniq the array
    typeset -U repositories
    compadd "$@" -a repositories
}

# builds command for invoking pacman in a _call_program command - extracts
# relevant options already specified (config file, etc)
# $cmd must be declared by calling function
_aura_get_command() {
    # this is mostly nicked from _perforce
    cmd=( "pacman" )
    integer i
    for (( i = 2; i < CURRENT - 1; i++ )); do
        if [[ ${words[i]} = "--config" || ${words[i]} = "--root" ]]; then
            cmd+=( ${words[i,i+1]} )
        fi
    done
}

# main dispatcher
_aura() {
    typeset -A opt_args

    # options for passing to _arguments
    # A C L O are aura commands. The rest are from pacman.
    typeset -a _aura_opts_commands
    _aura_opts_commands=(
        '-A[Install and manage AUR packages]'
        '-B[Manage the global package state]'
        '-C[Manage the package cache]'
        '-L[Analyse the pacman log file]'
        '-O[Manage orphan packages]'
        '-Q[Query the package database]'
        '-R[Remove a packags]'
        '-S[Synchronize repo packages]'
        '-U[Upgrade packages]'
        '-V[Display version information]'
        '-h[Help message]'
        '--no-pp[Do not use powerpill]'
        '--viewconf[View the pacman config file read-only]'
        '--languages[Display available output languages]'
    )


    # options for passing to _arguments: options common to all commands
    # Options commented out are supposed to be supported, but aren't.
    typeset -a _aura_opts_common
    _aura_opts_common=(
#        '-b[Alternate database location]:database_location:_files -/'
        '-h[Display syntax for the given operation]'
#        '-r[Set alternate installation root]:installation root:_files -/'
        '-v[Be more verbose]'
        '--auradebug[Show aura settings information.]'
#        '--cachedir[Alternate package cache location]:cache_location:_files -/'
#        '--config[An alternate configuration file]:config file:_files'
#        '--logfile[An alternate log file]:config file:_files'
        '--noconfirm[Do not ask for confirmation in Aura or Pacman]'
        '--noprogressbar[Do not show a progress bar when downloading files]'
        '--noscriptlet[Do not execute the install scriptlet if one exists]'
        '--print[Only print the targets instead of performing the operation]'
    )

    # options for passing to _arguments: options for --aursync commands
    typeset -a _aura_opts_aursync
    _aura_opts_aursync=(
        '-a[Uninstall unneeded build deps after installation.]'
        '-d[Display package dependencies. Recursive for AUR deps.]'
        '-i[Display AUR package information.]'
        '-k[Show PKGBUILD diffs when upgrading.]'
        '-p[Display an AUR package PKGBUILD.]'
        '-q[Display less information for certain operations.]'
        '-s[Search the AUR. Words only. No regex.]'
        '-u[Upgrade all installed AUR packages.]'
        '-w[Download an AUR package source tarball.]'
        '-x[Unsuppress makepkg output during building.]'
        '--aurignore=[Ignore AUR packages when installing.]'
        '--hotedit[Prompt user to edit PKGBUILD before dep checks.]'
    )

    # options for passing to _arguments: options for --save commands
    typeset -a _aura_opts_save
    _aura_opts_save=(
        '-c[Given n, save n recent package states and remove the rest.']
        '-r[Restore a previously saved package state]'
    )

    # options for passing to _arguments: options for --downgrade commands
    typeset -a _aura_opts_downgrade
    _aura_opts_downgrade=(
        '-b[Backup the cache to a given directory.]'
        '-c[Given n, save n versions of each package file. Delete rest.]'
        '-s[Search the cache via a regex.]'
        '*:installed package:_aura_completions_installed_packages'
    )

    # options for passing to _arguments: options for --viewlog commands
    typeset -a _aura_opts_viewlog
    _aura_opts_viewlog=(
        '-i[View package installation history.]'
        '-s[Search log file via a regex.]'
    )

    # options for passing to _arguments: options for --orphans commands
    typeset -a _aura_opts_orphans
    _aura_opts_orphans=( '-j[Uninstall all orphan packages.]' )

    # options for passing to _arguments: options for --upgrade commands
    typeset -a _aura_opts_pkgfile
    _aura_opts_pkgfile=(
        '-d[Skip dependency checks]'
        '-f[Overwrite conflicting files]'
        '*:package file:_files -g "*.pkg.tar.*(.)"'
    )

    # options for passing to _arguments: subactions for --query command
    typeset -a _aura_opts_query_actions
    _aura_opts_query_actions=(
        '-g[View all members of a package group]:*:package groups:->query_group'
        '-o[Query the package that owns a file]:file:_files'
        '-p[Package file to query]:*:package file:->query_file'
        '-s[Search package names and descriptions]:*:search text:->query_search'
    )

    # options for passing to _arguments: options for --query and subcommands
    typeset -a _aura_opts_query_modifiers
    _aura_opts_query_modifiers=(
        '-c[List package changelog]'
        '-d[List packages installed as dependencies]'
        '-e[List packages explicitly installed]'
        '-i[View package information]'
        '-ii[View package information including backup files]'
        '-k[Check package files]'
        '-l[List package contents]'
        '-m[List installed packages not found in sync db(s)]'
        '-q[Display less information for certain operations.]'
        '-t[List packages not required by any package]'
        '-u[List packages that can be upgraded]'
    )

    # options for passing to _arguments: options for --remove command
    typeset -a _aura_opts_remove
    _aura_opts_remove=(
        '-c[Remove all dependent packages]'
        '-d[Skip dependency checks]'
        '-k[Only remove database entry, do not remove files]'
        '-n[Remove protected configuration files]'
        '-s[Remove dependencies not required by other packages]'
        '*:installed package:_aura_completions_installed_packages'
    )

    # options for passing to _arguments: options for --sync command
    typeset -a _aura_opts_sync_actions
    _aura_opts_sync_actions=(
        '*-c[Remove old packages from cache]:*:clean:->sync_clean'
        '*-cc[Remove all packages from cache]:*:clean:->sync_clean'
        '-g[View all members of a package group]:*:package groups:->sync_group'
        '-s[Search package names and descriptions]:*:search text:->sync_search'
    )

    # options for passing to _arguments: options for --sync command
    typeset -a _aura_opts_sync_modifiers
    _aura_opts_sync_modifiers=(
        '-d[Skip dependency checks]'
        '-f[Overwrite conflicting files]'
        '-i[View package information]'
        '-l[List all packages in a repository]'
        '-p[Print download URIs for each package to be installed]'
        '-q[Display less information for certain operations.]'
        '-u[Upgrade all out-of-date packages]'
        '-w[Download packages only]'
        '-y[Download fresh package databases]'
        '*--ignore[Ignore a package upgrade]:package:
            _aura_completions_all_packages'
        '*--ignoregroup[Ignore a group upgrade]:package group:
            _aura_completions_all_groups'
        '--asdeps[Install packages as non-explicitly installed]'
        '--asexplicit[Install packages as explicitly installed]'
    )

    case $words[2] in
        -A*) _arguments -s : "$_aura_opts_common[@]" "$_aura_opts_aursync[@]"   ;;
        -B*) _arguments -s : "$_aura_opts_common[@]" "$_aura_opts_save[@]"      ;;
        -C*) _arguments -s : "$_aura_opts_common[@]" "$_aura_opts_downgrade[@]" ;;
        -L*) _arguments -s : "$_aura_opts_common[@]" "$_aura_opts_viewlog[@]"   ;;
        -O*) _arguments -s : "$_aura_opts_common[@]" "$_aura_opts_orphans[@]"   ;;
        -Q*g*) # ipkg groups
            _arguments -s : \
                "$_aura_opts_common[@]" \
                "$_aura_opts_query_modifiers[@]" \
                '*:groups:_aura_completions_installed_groups'
            ;;
        -Q*o*) # file
            _arguments -s : \
                "$_aura_opts_common[@]" \
                "$_aura_opts_query_modifiers[@]" \
                '*:package file:_files'
            ;;
        -Q*p*) # file *.pkg.tar.*
            _arguments -s : \
                "$_aura_opts_common[@]" \
                "$_aura_opts_query_modifiers[@]" \
                '*:package file:_files -g "*.pkg.tar.*"'
            ;;
        -Q*)  _aura_action_query    ;;
        -R*)  _aura_action_remove   ;;
        -S*c*) # no completion
            return 0
            ;;
        -S*l*) # repos
            _arguments -s : \
                "$_aura_opts_common[@]" \
                "$_aura_opts_sync_modifiers[@]" \
                '*:package repo:_aura_completions_repositories' \
                ;;
        -S*g*) # pkg groups
            _arguments -s : \
                "$_aura_opts_common[@]" \
                "$_aura_opts_sync_modifiers[@]" \
                '*:package group:_aura_completions_all_groups'
            ;;
        -S*)  _aura_action_sync     ;;
        -U*)  _aura_action_upgrade  ;;
        -V*)  _aura_action_version  ;;
        -h*)  _aura_action_help     ;;
        -  )  _aura_action_none     ;;
        *  )  return 1              ;;
    esac
}

# run the main dispatcher
_aura "$@"
